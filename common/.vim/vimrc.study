"
" =====================================================================
" =========================== KICKSTART.VIM ===========================
" =====================================================================
"
" This is Theo's version of Kickstart.vim:
" https://github.com/theopn/kickstart.vim
"
" My version focuses on
" - Note taking using Vimwiki
" - Custom Bufferline
"

let mapleader=' '
let maplocalleader = ' '

" [[ Vim-plug ]]
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sleuth'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'ervandew/supertab'
Plug 'liuchengxu/vim-which-key'
Plug 'airblade/vim-gitgutter'
Plug 'joshdick/onedark.vim'
Plug 'vim-airline/vim-airline'
Plug 'Yggdroot/indentLine'
Plug 'tpope/vim-commentary'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'vimwiki/vimwiki'
call plug#end()


" [[ (most of) Neovim defaults ]]
filetype on
syntax on
set autoindent autoread background=dark backspace=indent,eol,start belloff=all
set display=lastline encoding=utf-8 hidden history=10000 hlsearch
set incsearch nojoinspaces laststatus=2 listchars=tab:>\ ,trail:-,nbsp:+ ruler
set showcmd smarttab nostartofline switchbuf=uselast wildmenu
set wildoptions=pum,tagfile


" [[ My options ]]
set number relativenumber
set cursorline cursorcolumn colorcolumn=80
set list listchars+=leadmultispace:\|\  showbreak=$
set showtabline=2 scrolloff=7 termguicolors signcolumn=yes
" Split
set splitright splitbelow
" Search
set ignorecase smartcase
" Spell
set spell spelllang=en_us spellsuggest=best,8 spelloptions=camel
" Others
set updatetime=250 timeoutlen=300
set confirm
set mouse=a
set breakindent
set completeopt=menuone,noselect
set autochdir


" [[ Personal Keymaps ]]
nnoremap <silent> <Space> <Nop>
xnoremap <silent> <Space> <Nop>

" Default keymap overrides
tnoremap <ESC> <C-\><C-n>
nnoremap <expr> <silent> k v:count == 0 ? 'gk' : 'k'
nnoremap <expr> <silent> j v:count == 0 ? 'gj' : 'j'
nnoremap n nzz
nnoremap N Nzz
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
nnoremap <C-w>+ <C-w>+:call feedkeys("\<lt>C-w>")<CR>
nnoremap <C-w>- <C-w>-:call feedkeys("\<lt>C-w>")<CR>

" Auto pairs
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap {<CR> {<CR>}<ESC>ko<TAB>

" I will die without this one
inoremap <silent> jk <ESC>
" Convenience
nnoremap <leader>a gg<S-v>G
nnoremap <leader>/ :noh<CR>
" Copy and paste
xnoremap <leader>y "+y
nnoremap <leader>p :reg<CR>
xnoremap <leader>p "_dP
" Terminal
nnoremap <leader>t :botright term<CR>
" Spell check
inoremap <C-s> <C-g>u<ESC>[s1z=`]a<C-g>u
" Buffer
nnoremap <leader>b :ls<CR>:b<SPACE>
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap <leader>k :ls<CR>
      \: echo '[Theovim] Choose a buf to delete
      \(blank: choose curr buf, RET: confirm, ESC: cancel)'<CR>
      \:bdelete<SPACE>
" Window
fun! SmartWinMove(key)
  let t:currwin = winnr()
  exec 'wincmd ' . a:key
  if t:currwin == winnr()
    if a:key == 'h' || a:key == 'l'
      wincmd v
    else
      wincmd s
    endif
    exec 'wincmd ' . a:key
  endif
endfun
nnoremap <C-h> :call SmartWinMove('h')<CR>
nnoremap <C-j> :call SmartWinMove('j')<CR>
nnoremap <C-k> :call SmartWinMove('k')<CR>
nnoremap <C-l> :call SmartWinMove('l')<CR>

" [[ Commands ]]
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//ec
  call winrestview(l:save)
endfun
command TrimWhiespace call TrimWhitespace()

" [[ Bufferline ]]
fun! SpawnBufferLine()
  let s = ' :) | '

  " Get the list of buffers. Use bufexists() to include hidden buffers
  let bufferNums = filter(range(1, bufnr('$')), 'buflisted(v:val)')
  " Making a buffer list on the left side
  for i in bufferNums
    " Highlight with yellow if it's the current buffer
    let s .= (i == bufnr()) ? ('%#TabLineSel#') : ('%#TabLine#')
    let s .= i . ' '  " Append the buffer number
    if bufname(i) == ''
      let s .= '[NEW]'  " Give a name to a new buffer
    endif
    if getbufvar(i, "&modifiable")
      let s .= fnamemodify(bufname(i), ':t')  " Append the file name
      " let s .= pathshorten(bufname(i))  " Use this if you want a trimmed path
      " If the buffer is modified, add + and separator. Else, add separator
      let s .= (getbufvar(i, "&modified")) ? (' [+] | ') : (' | ')
    else
      let s .= fnamemodify(bufname(i), ':t') . ' [RO] |'  " Add read only flag
    endif
  endfor
  let s .= '%#TabLineFill#%T '  " Reset highlight

  let s .= '%=' " Spacer

  " Making a tab list on the right side
  for i in range(1, tabpagenr('$'))  " Loop through the number of tabs
    " Highlight with yellow if it's the current tab
    let s .= (i == tabpagenr()) ? ('%#TabLineSel#') : ('%#TabLine#')
    let s .= '%' . i . 'T '  " set the tab page number (for mouse clicks)
    let s .= i . ''          " set page number string
  endfor
  let s .= '%#TabLineFill#%T'  " Reset highlight

  " Close button on the right if there are multiple tabs
  if tabpagenr('$') > 1
    let s .= '%999X X'
  endif
  return s
endfun

set tabline=%!SpawnBufferLine()  " Assign the tabline


" [[ Configure plugins ]]
colorscheme onedark
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" Vimwiki
let g:vimwiki_list = [{ 'path': '~/Nextcloud/theo-vimwiki/',
       \ 'syntax':'markdown', 'ext': '.md' }]
let g:vimwiki_global_ext = 1


" [[ Configure Netrw ]]
let g:netrw_banner = 0 " No guide on the top, turn on if error occurs
let g:netrw_liststyle = 1 " 0 simple, 1 detailed, 2 thick, 3 tree
let g:netrw_browse_split = 3
let g:netrw_winsize = 15
augroup netrw_autocmds
  autocmd!
  " Close netrw if it is the last buffer
  autocmd WinEnter * if tabpagenr('$') == 1 && winnr('$') == 1
  \ && getbufvar(winbufnr(winnr()), "&filetype") == 'netrw' | quit | endif
  autocmd VimEnter * :Vexplore | wincmd p  " Netrw open on startup
augroup END

" Function to toggle netrw buffer using global var and buf wipeout
let g:NetrwIsOpen = 1 " Since I open netrw in the startup
fun! ToggleNetrw()
  if g:NetrwIsOpen
    for i in range(1, bufnr('$'))
      if getbufvar(i, "&filetype") == 'netrw'
        silent exe 'bwipeout ' . i
      endif
    endfor
    let g:NetrwIsOpen = 0
  else
    let g:NetrwIsOpen = 1
    silent Lex
  endif
endfun

nnoremap <leader>n :call ToggleNetrw()<CR>


" [[ Configure vim-which-key ]]
call which_key#register('<Space>', "g:which_key_map")
nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey  '<Space>'<CR>

" document key chains
let g:which_key_map =  {}
let g:which_key_map.c = { 'name' : '[C]ode' }
let g:which_key_map.d = { 'name' : '[D]ocument' }
let g:which_key_map.g = { 'name' : '[G]it' }
let g:which_key_map.h = {
      \ 'name' : 'More git',
      \ 'p' : 'Preview git hunk',
      \}
let g:which_key_map.r = { 'name' : '[R]ename' }
let g:which_key_map.s = { 'name' : '[S]earch' }
let g:which_key_map.w = { 'name' : '[W]orkspace' }

" Adding personal keybindings
let g:which_key_map.a = 'Select all'
let g:which_key_map['/'] = 'Clear search highlights'


" [[ Configure fzf.vim ]]
nmap <leader>? :History<CR>
let g:which_key_map['?'] = '[?] Find recently opened files'
nmap <leader><space> :Buffers<CR>
let g:which_key_map[' '] = '[ ] Find existing buffers'
nmap <leader>/ :BLines<CR>
let g:which_key_map['/'] = '[/] Fuzzily search in current buffer'

nmap <leader>gf :GFiles<CR>
let g:which_key_map.g.f = 'Search [G]it [F]iles'
nmap <leader>sf :Files<CR>
let g:which_key_map.s.f = '[S]earch [F]iles'
nmap <leader>sh :Helptags<CR>
let g:which_key_map.s.h = '[S]earch [H]elp'


" [[ Configure completion ]]
filetype plugin on
set omnifunc=syntaxcomplete#Complete
inoremap <expr> <CR> pumvisible() ? '<C-y>' : '<CR>'
let g:SuperTabDefaultCompletionType = "context"

" [[ Configure LSP ]]
" Performance related settings, requires Vim 8.2+
let g:lsp_use_native_client = 1
let g:lsp_semantic_enabled = 0
let g:lsp_format_sync_timeout = 1000

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

  " Keymaps
  " Go to previous diagnostic message
  nmap <buffer> [d <plug>(lsp-previous-diagnostic)
  " Go to next diagnostic message
  nmap <buffer> ]d <plug>(lsp-next-diagnostic)

  nmap <buffer> <leader>rn <plug>(lsp-rename)
  let g:which_key_map.r.n = '[R]e[n]ame'
  nmap <buffer> <leader>ca <plug>(lsp-code-action-float)
  let g:which_key_map.c.a = '[C]ode [A]ction'

  " [G]oto [D]efinition
  nmap <buffer> gd <plug>(lsp-definition)
  " [G]oto [R]eferences
  nmap <buffer> gr <plug>(lsp-references)
  " [G]oto [I]mplementation
  nmap <buffer> gI <plug>(lsp-implementation)

  nmap <buffer> <leader>D <plug>(lsp-peek-type-definition)
  let g:which_key_map.D = 'Type [D]efinition'
  nmap <buffer> <leader>ds <plug>(lsp-document-symbol-search)
  let g:which_key_map.d.s = '[D]ocument [S]ymbols'
  nmap <buffer> <leader>ws <plug>(lsp-workspace-symbol-search)
  let g:which_key_map.w.s = '[W]orkspace [S]ymbols'

  " Hover Documentation
  nmap <buffer> K <plug>(lsp-hover)
  " Signature Documentation
  nmap <buffer> <C-k> <plug>(lsp-signature-help)

  " [G]oto [D]eclaration
  nmap <buffer> gD <plug>(lsp-declaration)

  " Create a command `:Format` local to the LSP buffer
  command Format LspDocumentFormatSync
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" vim: ts=2 sts=2 sw=2 et
